
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000089a  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  00800068  00800068  00000936  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002330  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1d  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ee  00000000  00000000  00003d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00004f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b8  00000000  00000000  00005304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000361  00000000  00000000  00005bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3a       	cpi	r26, 0xA3	; 163
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <main>
  8a:	0c 94 4b 04 	jmp	0x896	; 0x896 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Application_init>:
void Application_init()
{

   
   	
   WalkerInterface_init();	
  92:	0e 94 8b 03 	call	0x716	; 0x716 <WalkerInterface_init>
   WalkerTraffic_init();
  96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <WalkerTraffic_init>
   CarTraffic_init();
  9a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <CarTraffic_init>
  9e:	08 95       	ret

000000a0 <Application_start>:
void Application_start()
{
	while (1)
	{

			WalkerInterface_start();
  a0:	0e 94 c5 03 	call	0x78a	; 0x78a <WalkerInterface_start>
			WalkerTraffic_start();
  a4:	0e 94 35 04 	call	0x86a	; 0x86a <WalkerTraffic_start>
		    CarTraffic_start();
  a8:	0e 94 84 03 	call	0x708	; 0x708 <CarTraffic_start>
  ac:	f9 cf       	rjmp	.-14     	; 0xa0 <Application_start>

000000ae <button_init>:

#include "button.h"

void button_init(button_t btn)
{
	if (btn.port==PA)
  ae:	26 2f       	mov	r18, r22
  b0:	37 2f       	mov	r19, r23
  b2:	2b 33       	cpi	r18, 0x3B	; 59
  b4:	31 05       	cpc	r19, r1
  b6:	69 f4       	brne	.+26     	; 0xd2 <button_init+0x24>
	{
		PinWrite(DA,btn.pin,0);
  b8:	4a b3       	in	r20, 0x1a	; 26
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	b9 01       	movw	r22, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <button_init+0x18>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <button_init+0x14>
  ca:	cb 01       	movw	r24, r22
  cc:	80 95       	com	r24
  ce:	84 23       	and	r24, r20
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	08 95       	ret

000000d4 <button_read>:


btnst button_read(button_t btn)
{

		 if (btn.edge==pull_up)
  d4:	91 30       	cpi	r25, 0x01	; 1
  d6:	89 f4       	brne	.+34     	; 0xfa <button_read+0x26>
		 {
			 if (btn.port==PA)
  d8:	26 2f       	mov	r18, r22
  da:	37 2f       	mov	r19, r23
  dc:	2b 33       	cpi	r18, 0x3B	; 59
  de:	31 05       	cpc	r19, r1
  e0:	e9 f4       	brne	.+58     	; 0x11c <button_read+0x48>
			 {
				 if (PinRead(IA,btn.pin))
  e2:	29 b3       	in	r18, 0x19	; 25
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	a9 01       	movw	r20, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <button_read+0x1a>
  ea:	55 95       	asr	r21
  ec:	47 95       	ror	r20
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <button_read+0x16>
  f2:	40 fd       	sbrc	r20, 0
  f4:	14 c0       	rjmp	.+40     	; 0x11e <button_read+0x4a>
				 {
					 return released;
				 }
				 else
				 {
					 return pressed;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret
			 
		 }
		 else
		 {
			 
			 if (btn.port==PA)
  fa:	26 2f       	mov	r18, r22
  fc:	37 2f       	mov	r19, r23
  fe:	2b 33       	cpi	r18, 0x3B	; 59
 100:	31 05       	cpc	r19, r1
 102:	61 f4       	brne	.+24     	; 0x11c <button_read+0x48>
			 {
				 if (PinRead(IA,btn.pin))
 104:	29 b3       	in	r18, 0x19	; 25
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	a9 01       	movw	r20, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <button_read+0x3c>
 10c:	55 95       	asr	r21
 10e:	47 95       	ror	r20
 110:	8a 95       	dec	r24
 112:	e2 f7       	brpl	.-8      	; 0x10c <button_read+0x38>
 114:	40 ff       	sbrs	r20, 0
 116:	05 c0       	rjmp	.+10     	; 0x122 <button_read+0x4e>
				 {
					 return pressed;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
				 }
			 }
		 }
	
 
 11c:	08 95       	ret
		 {
			 if (btn.port==PA)
			 {
				 if (PinRead(IA,btn.pin))
				 {
					 return released;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	08 95       	ret
				 {
					 return pressed;
				 }
				 else
				 {
					 return released;
 122:	81 e0       	ldi	r24, 0x01	; 1
				 }
			 }
		 }
	
 
 124:	08 95       	ret

00000126 <led_init>:
 */ 
#include "led.h"

void led_init(led_t ld)
{
      if (ld.port==PA)
 126:	26 2f       	mov	r18, r22
 128:	37 2f       	mov	r19, r23
 12a:	2b 33       	cpi	r18, 0x3B	; 59
 12c:	31 05       	cpc	r19, r1
 12e:	61 f4       	brne	.+24     	; 0x148 <led_init+0x22>
      {
		 PinWrite(DA,ld.pin,1);
 130:	4a b3       	in	r20, 0x1a	; 26
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <led_init+0x18>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <led_init+0x14>
 142:	cb 01       	movw	r24, r22
 144:	84 2b       	or	r24, r20
 146:	8a bb       	out	0x1a, r24	; 26
 148:	08 95       	ret

0000014a <led_write>:

}
void led_write(led_t ld,ledst_t state)
{
	
	PinWrite(ld.port,ld.pin,state);
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	79 f4       	brne	.+30     	; 0x16c <led_write+0x22>
 14e:	e6 2f       	mov	r30, r22
 150:	f7 2f       	mov	r31, r23
 152:	40 81       	ld	r20, Z
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	b9 01       	movw	r22, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <led_write+0x16>
 15c:	66 0f       	add	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	8a 95       	dec	r24
 162:	e2 f7       	brpl	.-8      	; 0x15c <led_write+0x12>
 164:	cb 01       	movw	r24, r22
 166:	84 2b       	or	r24, r20
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret
 16c:	e6 2f       	mov	r30, r22
 16e:	f7 2f       	mov	r31, r23
 170:	40 81       	ld	r20, Z
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <led_write+0x34>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <led_write+0x30>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <led_toggle>:
	ld.state=state;
}
void led_toggle(led_t ld)
{
	
	PinToggle(ld.port,ld.pin);
 18c:	e6 2f       	mov	r30, r22
 18e:	f7 2f       	mov	r31, r23
 190:	90 81       	ld	r25, Z
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <led_toggle+0x10>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <led_toggle+0xc>
 1a0:	29 27       	eor	r18, r25
 1a2:	20 83       	st	Z, r18
 1a4:	08 95       	ret

000001a6 <T0_callback0>:
 *  Author: FAYROUZE
 */ 
#include "traffic.h"
void T0_callback0()
{
	if (TRAFF1->BlinkFlag==true)
 1a6:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 1aa:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 1ae:	86 85       	ldd	r24, Z+14	; 0x0e
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	31 f4       	brne	.+12     	; 0x1c0 <T0_callback0+0x1a>
	{
		led_toggle(TRAFF1->yellow);
 1b4:	60 85       	ldd	r22, Z+8	; 0x08
 1b6:	71 85       	ldd	r23, Z+9	; 0x09
 1b8:	82 85       	ldd	r24, Z+10	; 0x0a
 1ba:	93 85       	ldd	r25, Z+11	; 0x0b
 1bc:	0e 94 c6 00 	call	0x18c	; 0x18c <led_toggle>
 1c0:	08 95       	ret

000001c2 <T0_callback1>:
	
	
}
void T0_callback1()
{
	TRAFF1->NextStateFlag=true;
 1c2:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 1c6:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	85 87       	std	Z+13, r24	; 0x0d
	
	if (TRAFF1->state==close)
 1ce:	84 85       	ldd	r24, Z+12	; 0x0c
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <T0_callback1+0x16>
	{
		TRAFF1->state=open;
 1d4:	14 86       	std	Z+12, r1	; 0x0c
 1d6:	08 95       	ret
	}
	else
	{
		TRAFF1->state++;
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	84 87       	std	Z+12, r24	; 0x0c
 1dc:	08 95       	ret

000001de <T0_callback2>:
	}
	
}
void T0_callback2()
{
	if (TRAFF2->BlinkFlag==true)
 1de:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 1e2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 1e6:	86 85       	ldd	r24, Z+14	; 0x0e
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <T0_callback2+0x1a>
	{
		led_toggle(TRAFF2->yellow);
 1ec:	60 85       	ldd	r22, Z+8	; 0x08
 1ee:	71 85       	ldd	r23, Z+9	; 0x09
 1f0:	82 85       	ldd	r24, Z+10	; 0x0a
 1f2:	93 85       	ldd	r25, Z+11	; 0x0b
 1f4:	0e 94 c6 00 	call	0x18c	; 0x18c <led_toggle>
 1f8:	08 95       	ret

000001fa <T0_callback3>:
	
	
}
void T0_callback3()
{
	TRAFF2->NextStateFlag=true;
 1fa:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 1fe:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	85 87       	std	Z+13, r24	; 0x0d
	
	if (TRAFF2->state==close)
 206:	84 85       	ldd	r24, Z+12	; 0x0c
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	11 f4       	brne	.+4      	; 0x210 <T0_callback3+0x16>
	{
		TRAFF2->state=open;
 20c:	14 86       	std	Z+12, r1	; 0x0c
 20e:	08 95       	ret
	}
	else
	{
		TRAFF2->state++;
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	84 87       	std	Z+12, r24	; 0x0c
 214:	08 95       	ret

00000216 <Traffic1_init>:
	
}


void Traffic1_init(TrafficLight_t* traff)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
	TRAFF1 = traff;
 21c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <TRAFF1+0x1>
 220:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <TRAFF1>
	led_init(traff->red);
 224:	68 81       	ld	r22, Y
 226:	79 81       	ldd	r23, Y+1	; 0x01
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	9b 81       	ldd	r25, Y+3	; 0x03
 22c:	0e 94 93 00 	call	0x126	; 0x126 <led_init>
	led_init(traff->yellow);
 230:	68 85       	ldd	r22, Y+8	; 0x08
 232:	79 85       	ldd	r23, Y+9	; 0x09
 234:	8a 85       	ldd	r24, Y+10	; 0x0a
 236:	9b 85       	ldd	r25, Y+11	; 0x0b
 238:	0e 94 93 00 	call	0x126	; 0x126 <led_init>
	led_init(traff->green);
 23c:	6c 81       	ldd	r22, Y+4	; 0x04
 23e:	7d 81       	ldd	r23, Y+5	; 0x05
 240:	8e 81       	ldd	r24, Y+6	; 0x06
 242:	9f 81       	ldd	r25, Y+7	; 0x07
 244:	0e 94 93 00 	call	0x126	; 0x126 <led_init>
	
	Timer0_init();
 248:	0e 94 8c 02 	call	0x518	; 0x518 <Timer0_init>
	
	Timer0_init_ch1(500);     // to drive waiting state
 24c:	84 ef       	ldi	r24, 0xF4	; 244
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 9a 02 	call	0x534	; 0x534 <Timer0_init_ch1>
	Timer0_init_ch2(5000);    // to drive changing states every 5 seconds
 254:	88 e8       	ldi	r24, 0x88	; 136
 256:	93 e1       	ldi	r25, 0x13	; 19
 258:	0e 94 aa 02 	call	0x554	; 0x554 <Timer0_init_ch2>
	
	TRAFF1->state=close;
 25c:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 260:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	84 87       	std	Z+12, r24	; 0x0c
	TRAFF1->NextStateFlag=true;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	85 87       	std	Z+13, r24	; 0x0d
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <Traffic2_init>:

void Traffic2_init(TrafficLight_t* traff)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
		TRAFF2 = traff;
 278:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 27c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		led_init(traff->red);
 280:	68 81       	ld	r22, Y
 282:	79 81       	ldd	r23, Y+1	; 0x01
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	9b 81       	ldd	r25, Y+3	; 0x03
 288:	0e 94 93 00 	call	0x126	; 0x126 <led_init>
		led_init(traff->yellow);
 28c:	68 85       	ldd	r22, Y+8	; 0x08
 28e:	79 85       	ldd	r23, Y+9	; 0x09
 290:	8a 85       	ldd	r24, Y+10	; 0x0a
 292:	9b 85       	ldd	r25, Y+11	; 0x0b
 294:	0e 94 93 00 	call	0x126	; 0x126 <led_init>
		led_init(traff->green);
 298:	6c 81       	ldd	r22, Y+4	; 0x04
 29a:	7d 81       	ldd	r23, Y+5	; 0x05
 29c:	8e 81       	ldd	r24, Y+6	; 0x06
 29e:	9f 81       	ldd	r25, Y+7	; 0x07
 2a0:	0e 94 93 00 	call	0x126	; 0x126 <led_init>
	
	Timer0_init();
 2a4:	0e 94 8c 02 	call	0x518	; 0x518 <Timer0_init>
	
	Timer0_init_ch3(500);     // to drive waiting state
 2a8:	84 ef       	ldi	r24, 0xF4	; 244
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 ba 02 	call	0x574	; 0x574 <Timer0_init_ch3>
	Timer0_init_ch4(5000);    // to drive changing states every 5 seconds
 2b0:	88 e8       	ldi	r24, 0x88	; 136
 2b2:	93 e1       	ldi	r25, 0x13	; 19
 2b4:	0e 94 ca 02 	call	0x594	; 0x594 <Timer0_init_ch4>

	TRAFF2->state=close;
 2b8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 2bc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	84 87       	std	Z+12, r24	; 0x0c
	TRAFF2->NextStateFlag=true;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	85 87       	std	Z+13, r24	; 0x0d
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <Traffic1_FSM>:

void Traffic1_FSM()
{
	if (TRAFF1->state==close)
 2ce:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 2d2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 2d6:	84 85       	ldd	r24, Z+12	; 0x0c
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	f9 f4       	brne	.+62     	; 0x31a <Traffic1_FSM+0x4c>
	{
		TRAFF1->BlinkFlag     = false;
 2dc:	16 86       	std	Z+14, r1	; 0x0e
		TRAFF1->NextStateFlag = false;
 2de:	15 86       	std	Z+13, r1	; 0x0d
		
		led_write(TRAFF1->red   ,led_on);
 2e0:	60 81       	ld	r22, Z
 2e2:	71 81       	ldd	r23, Z+1	; 0x01
 2e4:	82 81       	ldd	r24, Z+2	; 0x02
 2e6:	93 81       	ldd	r25, Z+3	; 0x03
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF1->yellow,led_off);
 2ee:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 2f2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 2f6:	60 85       	ldd	r22, Z+8	; 0x08
 2f8:	71 85       	ldd	r23, Z+9	; 0x09
 2fa:	82 85       	ldd	r24, Z+10	; 0x0a
 2fc:	93 85       	ldd	r25, Z+11	; 0x0b
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF1->green ,led_off);
 304:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 308:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 30c:	64 81       	ldd	r22, Z+4	; 0x04
 30e:	75 81       	ldd	r23, Z+5	; 0x05
 310:	86 81       	ldd	r24, Z+6	; 0x06
 312:	97 81       	ldd	r25, Z+7	; 0x07
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		
	}
	
	if (TRAFF1->state==open)
 31a:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 31e:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 322:	84 85       	ldd	r24, Z+12	; 0x0c
 324:	81 11       	cpse	r24, r1
 326:	1f c0       	rjmp	.+62     	; 0x366 <Traffic1_FSM+0x98>
	{
		TRAFF1->BlinkFlag     = false;
 328:	16 86       	std	Z+14, r1	; 0x0e
		TRAFF1->NextStateFlag = false;
 32a:	15 86       	std	Z+13, r1	; 0x0d
		
		led_write(TRAFF1->red   ,led_off);
 32c:	60 81       	ld	r22, Z
 32e:	71 81       	ldd	r23, Z+1	; 0x01
 330:	82 81       	ldd	r24, Z+2	; 0x02
 332:	93 81       	ldd	r25, Z+3	; 0x03
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF1->yellow,led_off);
 33a:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 33e:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 342:	60 85       	ldd	r22, Z+8	; 0x08
 344:	71 85       	ldd	r23, Z+9	; 0x09
 346:	82 85       	ldd	r24, Z+10	; 0x0a
 348:	93 85       	ldd	r25, Z+11	; 0x0b
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF1->green ,led_on);
 350:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 354:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 358:	64 81       	ldd	r22, Z+4	; 0x04
 35a:	75 81       	ldd	r23, Z+5	; 0x05
 35c:	86 81       	ldd	r24, Z+6	; 0x06
 35e:	97 81       	ldd	r25, Z+7	; 0x07
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
	}
	
	if (TRAFF1->state==wait)
 366:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 36a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 36e:	84 85       	ldd	r24, Z+12	; 0x0c
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	a1 f4       	brne	.+40     	; 0x39c <Traffic1_FSM+0xce>
	{
		TRAFF1->BlinkFlag     = true;
 374:	86 87       	std	Z+14, r24	; 0x0e
		TRAFF1->NextStateFlag = false;
 376:	15 86       	std	Z+13, r1	; 0x0d
		
		led_write(TRAFF1->red   ,led_off);
 378:	60 81       	ld	r22, Z
 37a:	71 81       	ldd	r23, Z+1	; 0x01
 37c:	82 81       	ldd	r24, Z+2	; 0x02
 37e:	93 81       	ldd	r25, Z+3	; 0x03
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF1->green ,led_off);
 386:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 38a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 38e:	64 81       	ldd	r22, Z+4	; 0x04
 390:	75 81       	ldd	r23, Z+5	; 0x05
 392:	86 81       	ldd	r24, Z+6	; 0x06
 394:	97 81       	ldd	r25, Z+7	; 0x07
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
 39c:	08 95       	ret

0000039e <Traffic2_FSM>:
	
}
void Traffic2_FSM()
{
	
	if (TRAFF2->state==close)
 39e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 3a2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 3a6:	84 85       	ldd	r24, Z+12	; 0x0c
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	f9 f4       	brne	.+62     	; 0x3ea <Traffic2_FSM+0x4c>
	{
		TRAFF2->BlinkFlag     = false;
 3ac:	16 86       	std	Z+14, r1	; 0x0e
		TRAFF2->NextStateFlag = false;
 3ae:	15 86       	std	Z+13, r1	; 0x0d
		
		led_write(TRAFF2->red   ,led_on);
 3b0:	60 81       	ld	r22, Z
 3b2:	71 81       	ldd	r23, Z+1	; 0x01
 3b4:	82 81       	ldd	r24, Z+2	; 0x02
 3b6:	93 81       	ldd	r25, Z+3	; 0x03
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF2->yellow,led_off);
 3be:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 3c2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 3c6:	60 85       	ldd	r22, Z+8	; 0x08
 3c8:	71 85       	ldd	r23, Z+9	; 0x09
 3ca:	82 85       	ldd	r24, Z+10	; 0x0a
 3cc:	93 85       	ldd	r25, Z+11	; 0x0b
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF2->green ,led_off);
 3d4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 3d8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 3dc:	64 81       	ldd	r22, Z+4	; 0x04
 3de:	75 81       	ldd	r23, Z+5	; 0x05
 3e0:	86 81       	ldd	r24, Z+6	; 0x06
 3e2:	97 81       	ldd	r25, Z+7	; 0x07
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		
	}
	
	if (TRAFF2->state==open)
 3ea:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 3ee:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 3f2:	84 85       	ldd	r24, Z+12	; 0x0c
 3f4:	81 11       	cpse	r24, r1
 3f6:	1f c0       	rjmp	.+62     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	{
		TRAFF2->BlinkFlag     = false;
 3f8:	16 86       	std	Z+14, r1	; 0x0e
		TRAFF2->NextStateFlag = false;
 3fa:	15 86       	std	Z+13, r1	; 0x0d
		
		led_write(TRAFF2->red   ,led_off);
 3fc:	60 81       	ld	r22, Z
 3fe:	71 81       	ldd	r23, Z+1	; 0x01
 400:	82 81       	ldd	r24, Z+2	; 0x02
 402:	93 81       	ldd	r25, Z+3	; 0x03
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF2->yellow,led_off);
 40a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 40e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 412:	60 85       	ldd	r22, Z+8	; 0x08
 414:	71 85       	ldd	r23, Z+9	; 0x09
 416:	82 85       	ldd	r24, Z+10	; 0x0a
 418:	93 85       	ldd	r25, Z+11	; 0x0b
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF2->green ,led_on);
 420:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 424:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 428:	64 81       	ldd	r22, Z+4	; 0x04
 42a:	75 81       	ldd	r23, Z+5	; 0x05
 42c:	86 81       	ldd	r24, Z+6	; 0x06
 42e:	97 81       	ldd	r25, Z+7	; 0x07
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
	}
	
	if (TRAFF2->state==wait)
 436:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 43a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 43e:	84 85       	ldd	r24, Z+12	; 0x0c
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	a1 f4       	brne	.+40     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	{
		TRAFF2->BlinkFlag     = true;
 444:	86 87       	std	Z+14, r24	; 0x0e
		TRAFF2->NextStateFlag = false;
 446:	15 86       	std	Z+13, r1	; 0x0d
		
		led_write(TRAFF2->red   ,led_off);
 448:	60 81       	ld	r22, Z
 44a:	71 81       	ldd	r23, Z+1	; 0x01
 44c:	82 81       	ldd	r24, Z+2	; 0x02
 44e:	93 81       	ldd	r25, Z+3	; 0x03
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		led_write(TRAFF2->green ,led_off);
 456:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 45a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 45e:	64 81       	ldd	r22, Z+4	; 0x04
 460:	75 81       	ldd	r23, Z+5	; 0x05
 462:	86 81       	ldd	r24, Z+6	; 0x06
 464:	97 81       	ldd	r25, Z+7	; 0x07
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
 46c:	08 95       	ret

0000046e <Traffic1_start>:
	
}

void Traffic1_start()
{
	if (TRAFF1->NextStateFlag==true)
 46e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 472:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 476:	85 85       	ldd	r24, Z+13	; 0x0d
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	11 f4       	brne	.+4      	; 0x480 <Traffic1_start+0x12>
	{
        Traffic1_FSM();
 47c:	0e 94 67 01 	call	0x2ce	; 0x2ce <Traffic1_FSM>
		
	}
	if (TRAFF1->ChangeStateFlag==true)
 480:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 484:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 488:	87 85       	ldd	r24, Z+15	; 0x0f
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	49 f4       	brne	.+18     	; 0x4a0 <Traffic1_start+0x32>
	{
		Timer0_ch2RST();
 48e:	0e 94 82 02 	call	0x504	; 0x504 <Timer0_ch2RST>
		Traffic1_FSM();
 492:	0e 94 67 01 	call	0x2ce	; 0x2ce <Traffic1_FSM>
		TRAFF1->ChangeStateFlag=false;
 496:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 49a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 49e:	17 86       	std	Z+15, r1	; 0x0f
 4a0:	08 95       	ret

000004a2 <Traffic2_start>:
	
}

void Traffic2_start()
{
	if (TRAFF2->NextStateFlag==true)
 4a2:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 4a6:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 4aa:	85 85       	ldd	r24, Z+13	; 0x0d
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	11 f4       	brne	.+4      	; 0x4b4 <Traffic2_start+0x12>
	{
		Traffic2_FSM();
 4b0:	0e 94 cf 01 	call	0x39e	; 0x39e <Traffic2_FSM>
		
	}
	if (TRAFF2->ChangeStateFlag==true)
 4b4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 4b8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 4bc:	87 85       	ldd	r24, Z+15	; 0x0f
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	49 f4       	brne	.+18     	; 0x4d4 <Traffic2_start+0x32>
	{
		Timer0_ch4RST();
 4c2:	0e 94 87 02 	call	0x50e	; 0x50e <Timer0_ch4RST>
		Traffic2_FSM();
 4c6:	0e 94 cf 01 	call	0x39e	; 0x39e <Traffic2_FSM>
		TRAFF2->ChangeStateFlag=false;
 4ca:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 4ce:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 4d2:	17 86       	std	Z+15, r1	; 0x0f
 4d4:	08 95       	ret

000004d6 <Traffic1_SetState>:
	
}

void Traffic1_SetState(traffst_t state)
{
	TRAFF1->ChangeStateFlag = true;
 4d6:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TRAFF1>
 4da:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TRAFF1+0x1>
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	97 87       	std	Z+15, r25	; 0x0f
	TRAFF1->state           = state;
 4e2:	84 87       	std	Z+12, r24	; 0x0c
 4e4:	08 95       	ret

000004e6 <Traffic2_SetState>:
}

void Traffic2_SetState(traffst_t state)
{
	TRAFF2->ChangeStateFlag = true;
 4e6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 4ea:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	97 87       	std	Z+15, r25	; 0x0f
	TRAFF2->state           = state;
 4f2:	84 87       	std	Z+12, r24	; 0x0c
 4f4:	08 95       	ret

000004f6 <main>:
#include "application.h"


int main( void )
{
   Application_init();
 4f6:	0e 94 49 00 	call	0x92	; 0x92 <Application_init>
   Application_start();
 4fa:	0e 94 50 00 	call	0xa0	; 0xa0 <Application_start>
			   	
			   	led_write(PowerIndicator,led_off);
		   	}
	   }
*/
}
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	08 95       	ret

00000504 <Timer0_ch2RST>:
	dchannel4= ((delay_MS/100)*2);                       // delay of channle 1
	
}

void Timer0_init_ch5(uint16_t delay_MS )
{
 504:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <channle2+0x1>
 508:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <channle2>
 50c:	08 95       	ret

0000050e <Timer0_ch4RST>:
 50e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <channle4+0x1>
 512:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <channle4>
 516:	08 95       	ret

00000518 <Timer0_init>:
 518:	8f b7       	in	r24, 0x3f	; 63
 51a:	80 68       	ori	r24, 0x80	; 128
 51c:	8f bf       	out	0x3f, r24	; 63
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	88 60       	ori	r24, 0x08	; 8
 522:	83 bf       	out	0x33, r24	; 51
 524:	83 b7       	in	r24, 0x33	; 51
 526:	85 60       	ori	r24, 0x05	; 5
 528:	83 bf       	out	0x33, r24	; 51
 52a:	8a ef       	ldi	r24, 0xFA	; 250
 52c:	8c bf       	out	0x3c, r24	; 60
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	89 bf       	out	0x39, r24	; 57
 532:	08 95       	ret

00000534 <Timer0_init_ch1>:
 534:	9c 01       	movw	r18, r24
 536:	36 95       	lsr	r19
 538:	27 95       	ror	r18
 53a:	36 95       	lsr	r19
 53c:	27 95       	ror	r18
 53e:	ab e7       	ldi	r26, 0x7B	; 123
 540:	b4 e1       	ldi	r27, 0x14	; 20
 542:	0e 94 3c 04 	call	0x878	; 0x878 <__umulhisi3>
 546:	8e 7f       	andi	r24, 0xFE	; 254
 548:	97 70       	andi	r25, 0x07	; 7
 54a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <dchannel1+0x1>
 54e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <dchannel1>
 552:	08 95       	ret

00000554 <Timer0_init_ch2>:
 554:	9c 01       	movw	r18, r24
 556:	36 95       	lsr	r19
 558:	27 95       	ror	r18
 55a:	36 95       	lsr	r19
 55c:	27 95       	ror	r18
 55e:	ab e7       	ldi	r26, 0x7B	; 123
 560:	b4 e1       	ldi	r27, 0x14	; 20
 562:	0e 94 3c 04 	call	0x878	; 0x878 <__umulhisi3>
 566:	8e 7f       	andi	r24, 0xFE	; 254
 568:	97 70       	andi	r25, 0x07	; 7
 56a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <dchannel2+0x1>
 56e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <dchannel2>
 572:	08 95       	ret

00000574 <Timer0_init_ch3>:
 574:	9c 01       	movw	r18, r24
 576:	36 95       	lsr	r19
 578:	27 95       	ror	r18
 57a:	36 95       	lsr	r19
 57c:	27 95       	ror	r18
 57e:	ab e7       	ldi	r26, 0x7B	; 123
 580:	b4 e1       	ldi	r27, 0x14	; 20
 582:	0e 94 3c 04 	call	0x878	; 0x878 <__umulhisi3>
 586:	8e 7f       	andi	r24, 0xFE	; 254
 588:	97 70       	andi	r25, 0x07	; 7
 58a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <dchannel3+0x1>
 58e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dchannel3>
 592:	08 95       	ret

00000594 <Timer0_init_ch4>:
 594:	9c 01       	movw	r18, r24
 596:	36 95       	lsr	r19
 598:	27 95       	ror	r18
 59a:	36 95       	lsr	r19
 59c:	27 95       	ror	r18
 59e:	ab e7       	ldi	r26, 0x7B	; 123
 5a0:	b4 e1       	ldi	r27, 0x14	; 20
 5a2:	0e 94 3c 04 	call	0x878	; 0x878 <__umulhisi3>
 5a6:	8e 7f       	andi	r24, 0xFE	; 254
 5a8:	97 70       	andi	r25, 0x07	; 7
 5aa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 5b2:	08 95       	ret

000005b4 <__vector_10>:




ISR(TIMER0_COMP_vect)
{
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
#if USE_CALLBACK0 == 1	
    if (channle1==dchannel1)
 5d6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <channle1>
 5da:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <channle1+0x1>
 5de:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <dchannel1>
 5e2:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <dchannel1+0x1>
 5e6:	82 17       	cp	r24, r18
 5e8:	93 07       	cpc	r25, r19
 5ea:	39 f4       	brne	.+14     	; 0x5fa <__vector_10+0x46>
    {
		T0_callback0();
 5ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <T0_callback0>
		channle1=0;
 5f0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <channle1+0x1>
 5f4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <channle1>
 5f8:	05 c0       	rjmp	.+10     	; 0x604 <__vector_10+0x50>
    }
	else
	{
		channle1++;
 5fa:	01 96       	adiw	r24, 0x01	; 1
 5fc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <channle1+0x1>
 600:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <channle1>
		
	}
	
#endif	
#if USE_CALLBACK1 == 1
      if (channle2==dchannel2)
 604:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <channle2>
 608:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <channle2+0x1>
 60c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <dchannel2>
 610:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <dchannel2+0x1>
 614:	82 17       	cp	r24, r18
 616:	93 07       	cpc	r25, r19
 618:	39 f4       	brne	.+14     	; 0x628 <__vector_10+0x74>
      {
	     T0_callback1();
 61a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <T0_callback1>
		 channle2=0;
 61e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <channle2+0x1>
 622:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <channle2>
 626:	05 c0       	rjmp	.+10     	; 0x632 <__vector_10+0x7e>
      }
	  else
	  {
		  channle2++;
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <channle2+0x1>
 62e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <channle2>
	  }
   
#endif
#if USE_CALLBACK2 == 1
          if (channle3==dchannel3)
 632:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <channle3>
 636:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <channle3+0x1>
 63a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <dchannel3>
 63e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <dchannel3+0x1>
 642:	82 17       	cp	r24, r18
 644:	93 07       	cpc	r25, r19
 646:	39 f4       	brne	.+14     	; 0x656 <__vector_10+0xa2>
          {
	          T0_callback2();
 648:	0e 94 ef 00 	call	0x1de	; 0x1de <T0_callback2>
	          channle3=0;
 64c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <channle3+0x1>
 650:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <channle3>
 654:	05 c0       	rjmp	.+10     	; 0x660 <__vector_10+0xac>
          }
          else
          {
	          channle3++;
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <channle3+0x1>
 65c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <channle3>
          }
#endif
#if USE_CALLBACK3 == 1
          if (channle4==dchannel4)
 660:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <channle4>
 664:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <channle4+0x1>
 668:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 66c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 670:	82 17       	cp	r24, r18
 672:	93 07       	cpc	r25, r19
 674:	39 f4       	brne	.+14     	; 0x684 <__vector_10+0xd0>
          {
	          T0_callback3();
 676:	0e 94 fd 00 	call	0x1fa	; 0x1fa <T0_callback3>
	          channle4=0;
 67a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <channle4+0x1>
 67e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <channle4>
 682:	05 c0       	rjmp	.+10     	; 0x68e <__vector_10+0xda>
          }
          else
          {
	          channle4++;
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <channle4+0x1>
 68a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <channle4>
          {
	          channle5++;
          }
#endif
	
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <CarTraffic_init>:
 *  Author: FAYROUZE
 */ 
#include "cartraffic.h"

void CarTraffic_init()
{
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29

	
	CarTrafficLights.TL.red.port=PA;
 6b4:	cf e8       	ldi	r28, 0x8F	; 143
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
 6b8:	8b e3       	ldi	r24, 0x3B	; 59
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	99 83       	std	Y+1, r25	; 0x01
 6be:	88 83       	st	Y, r24
	CarTrafficLights.TL.red.pin=PA0;
 6c0:	1a 82       	std	Y+2, r1	; 0x02
	
	CarTrafficLights.TL.yellow.port=PA;
 6c2:	99 87       	std	Y+9, r25	; 0x09
 6c4:	88 87       	std	Y+8, r24	; 0x08
	CarTrafficLights.TL.yellow.pin=PA1;
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	2a 87       	std	Y+10, r18	; 0x0a
	
	CarTrafficLights.TL.green.port=PA;
 6ca:	9d 83       	std	Y+5, r25	; 0x05
 6cc:	8c 83       	std	Y+4, r24	; 0x04
	CarTrafficLights.TL.green.pin=PA2;
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	8e 83       	std	Y+6, r24	; 0x06
	
	Traffic2_init(&CarTrafficLights.TL);
 6d2:	ce 01       	movw	r24, r28
 6d4:	0e 94 39 01 	call	0x272	; 0x272 <Traffic2_init>
	CarTrafficLights.PrevState=CarTrafficLights.TL.state;
 6d8:	8c 85       	ldd	r24, Y+12	; 0x0c
 6da:	88 8b       	std	Y+16, r24	; 0x10
	
}
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <CarTrafficUpdateStatus>:
	
	
}
void CarTrafficUpdateStatus()
{
	if (CarTrafficLights.TL.state != CarTrafficLights.PrevState)
 6e2:	ef e8       	ldi	r30, 0x8F	; 143
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	84 85       	ldd	r24, Z+12	; 0x0c
 6e8:	90 89       	ldd	r25, Z+16	; 0x10
 6ea:	89 17       	cp	r24, r25
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <CarTrafficUpdateStatus+0x12>
	{
		CarTrafficLights.UpdateEvent=true;
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	93 8b       	std	Z+19, r25	; 0x13
		CarTrafficLights.PrevState=CarTrafficLights.TL.state;
 6f2:	80 8b       	std	Z+16, r24	; 0x10
 6f4:	08 95       	ret

000006f6 <CarTrafficStopRequest>:
	}
	
}
void CarTrafficStopRequest()
{
	if (CarTrafficLights.StopRequest==true)
 6f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <CarTrafficLights+0x11>
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	21 f4       	brne	.+8      	; 0x706 <CarTrafficStopRequest+0x10>
	{
		Traffic2_SetState(wait);
 6fe:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Traffic2_SetState>
		CarTrafficLights.StopRequest=false;
 702:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <CarTrafficLights+0x11>
 706:	08 95       	ret

00000708 <CarTraffic_start>:
	CarTrafficLights.PrevState=CarTrafficLights.TL.state;
	
}
void CarTraffic_start()
{
	Traffic2_start();
 708:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Traffic2_start>
	CarTrafficUpdateStatus();
 70c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <CarTrafficUpdateStatus>
    CarTrafficStopRequest();
 710:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <CarTrafficStopRequest>
 714:	08 95       	ret

00000716 <WalkerInterface_init>:
 */ 

#include "walkerinterface.h"

void WalkerInterface_init()
{
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
	walker_btn.port=PA;
 71a:	e6 e8       	ldi	r30, 0x86	; 134
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	cb e3       	ldi	r28, 0x3B	; 59
 720:	d0 e0       	ldi	r29, 0x00	; 0
 722:	d1 83       	std	Z+1, r29	; 0x01
 724:	c0 83       	st	Z, r28
	walker_btn.pin= PA7;
 726:	87 e0       	ldi	r24, 0x07	; 7
 728:	82 83       	std	Z+2, r24	; 0x02
	walker_btn.edge=floating;
 72a:	13 82       	std	Z+3, r1	; 0x03
	button_init(walker_btn);
 72c:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <walker_btn>
 730:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <walker_btn+0x1>
 734:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <walker_btn+0x2>
 738:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <walker_btn+0x3>
 73c:	0e 94 57 00 	call	0xae	; 0xae <button_init>
	locker=unlocked;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <locker>
	
	   PowerIndicator.port = PA;
 746:	ea e8       	ldi	r30, 0x8A	; 138
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	d1 83       	std	Z+1, r29	; 0x01
 74c:	c0 83       	st	Z, r28
	   PowerIndicator.pin  = PA6;
 74e:	86 e0       	ldi	r24, 0x06	; 6
 750:	82 83       	std	Z+2, r24	; 0x02
	   led_init(PowerIndicator);
 752:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <PowerIndicator>
 756:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <PowerIndicator+0x1>
 75a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <PowerIndicator+0x2>
 75e:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <PowerIndicator+0x3>
 762:	0e 94 93 00 	call	0x126	; 0x126 <led_init>
	   led_write(PowerIndicator,led_on);
 766:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <PowerIndicator>
 76a:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <PowerIndicator+0x1>
 76e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <PowerIndicator+0x2>
 772:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <PowerIndicator+0x3>
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
	
}
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <WalkerInterface_sendWalkRequest>:
	}
  }
}
void WalkerInterface_sendWalkRequest()
{
	WalkerTrafficLights.WalkRequest = true;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <WalkerTrafficLights+0x10>
 788:	08 95       	ret

0000078a <WalkerInterface_start>:
}
void WalkerInterface_start()
{
	
	
  if(locker==unlocked)
 78a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <locker>
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	39 f5       	brne	.+78     	; 0x7e0 <WalkerInterface_start+0x56>
  {
	  
	if(button_read(walker_btn)==pressed)
 792:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <walker_btn>
 796:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <walker_btn+0x1>
 79a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <walker_btn+0x2>
 79e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <walker_btn+0x3>
 7a2:	0e 94 6a 00 	call	0xd4	; 0xd4 <button_read>
 7a6:	81 11       	cpse	r24, r1
 7a8:	10 c0       	rjmp	.+32     	; 0x7ca <WalkerInterface_start+0x40>
	{
		
		 led_write(PowerIndicator,led_on);
 7aa:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <PowerIndicator>
 7ae:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <PowerIndicator+0x1>
 7b2:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <PowerIndicator+0x2>
 7b6:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <PowerIndicator+0x3>
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
		 WalkerInterface_sendWalkRequest();
 7c0:	0e 94 c1 03 	call	0x782	; 0x782 <WalkerInterface_sendWalkRequest>
		 locker=locked;
 7c4:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <locker>
 7c8:	08 95       	ret
	}
	else
	{
		 led_write(PowerIndicator,led_off);
 7ca:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <PowerIndicator>
 7ce:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <PowerIndicator+0x1>
 7d2:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <PowerIndicator+0x2>
 7d6:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <PowerIndicator+0x3>
 7da:	40 e0       	ldi	r20, 0x00	; 0
 7dc:	0e 94 a5 00 	call	0x14a	; 0x14a <led_write>
 7e0:	08 95       	ret

000007e2 <WalkerInterface_ChangeStatus>:
	WalkerTrafficLights.WalkRequest = true;
	
}
void WalkerInterface_ChangeStatus()
{
	locker=unlocked;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <locker>
 7e8:	08 95       	ret

000007ea <WalkerTraffic_init>:

#include "walkertraffic.h"

void WalkerTraffic_init()
{
	WalkerTrafficLights.TL.red.port=PA;
 7ea:	e4 e7       	ldi	r30, 0x74	; 116
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	8b e3       	ldi	r24, 0x3B	; 59
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	91 83       	std	Z+1, r25	; 0x01
 7f4:	80 83       	st	Z, r24
	WalkerTrafficLights.TL.red.pin=PA3;
 7f6:	23 e0       	ldi	r18, 0x03	; 3
 7f8:	22 83       	std	Z+2, r18	; 0x02
	
	WalkerTrafficLights.TL.yellow.port=PA;
 7fa:	91 87       	std	Z+9, r25	; 0x09
 7fc:	80 87       	std	Z+8, r24	; 0x08
	WalkerTrafficLights.TL.yellow.pin=PA4;
 7fe:	24 e0       	ldi	r18, 0x04	; 4
 800:	22 87       	std	Z+10, r18	; 0x0a
	
	WalkerTrafficLights.TL.green.port=PA;
 802:	95 83       	std	Z+5, r25	; 0x05
 804:	84 83       	std	Z+4, r24	; 0x04
	WalkerTrafficLights.TL.green.pin=PA5;
 806:	85 e0       	ldi	r24, 0x05	; 5
 808:	86 83       	std	Z+6, r24	; 0x06
	
	Traffic1_init(&WalkerTrafficLights.TL);
 80a:	cf 01       	movw	r24, r30
 80c:	0e 94 0b 01 	call	0x216	; 0x216 <Traffic1_init>
 810:	08 95       	ret

00000812 <WalkerTraffic_RespondUpdateRequest>:
	
	
}
void WalkerTraffic_RespondUpdateRequest()
{
	if (CarTrafficLights.UpdateEvent==true)
 812:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <CarTrafficLights+0x13>
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	c1 f4       	brne	.+48     	; 0x84a <WalkerTraffic_RespondUpdateRequest+0x38>
	{
		if (CarTrafficLights.TL.state==open)
 81a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <CarTrafficLights+0xc>
 81e:	81 11       	cpse	r24, r1
 820:	05 c0       	rjmp	.+10     	; 0x82c <WalkerTraffic_RespondUpdateRequest+0x1a>
		{
			Traffic1_SetState(close);
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Traffic1_SetState>
			WalkerInterface_ChangeStatus();
 828:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <WalkerInterface_ChangeStatus>
		}
		if (CarTrafficLights.TL.state==close)
 82c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <CarTrafficLights+0xc>
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	19 f4       	brne	.+6      	; 0x83a <WalkerTraffic_RespondUpdateRequest+0x28>
		{
			Traffic1_SetState(open);
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Traffic1_SetState>
			
		}
		if (CarTrafficLights.TL.state==wait)
 83a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <CarTrafficLights+0xc>
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	11 f4       	brne	.+4      	; 0x846 <WalkerTraffic_RespondUpdateRequest+0x34>
		{
			Traffic1_SetState(wait);
 842:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Traffic1_SetState>
		}
		
		CarTrafficLights.UpdateEvent=false;
 846:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <CarTrafficLights+0x13>
 84a:	08 95       	ret

0000084c <WalkerTraffic_RespondWalkRequest>:
	
}

void WalkerTraffic_RespondWalkRequest()
{
	if (WalkerTrafficLights.TL.state!=open)
 84c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <WalkerTrafficLights+0xc>
 850:	88 23       	and	r24, r24
 852:	51 f0       	breq	.+20     	; 0x868 <__stack+0x9>
	{
			if (WalkerTrafficLights.WalkRequest==true) //dont forget to disable it
 854:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <WalkerTrafficLights+0x10>
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	31 f4       	brne	.+12     	; 0x868 <__stack+0x9>
			{
				CarTrafficLights.StopRequest=true;
 85c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <CarTrafficLights+0x11>
				Traffic1_SetState(wait);
 860:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Traffic1_SetState>
				WalkerTrafficLights.WalkRequest=false;
 864:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <WalkerTrafficLights+0x10>
 868:	08 95       	ret

0000086a <WalkerTraffic_start>:
	
	
}
void WalkerTraffic_start()
{
	Traffic1_start();
 86a:	0e 94 37 02 	call	0x46e	; 0x46e <Traffic1_start>
	WalkerTraffic_RespondWalkRequest();
 86e:	0e 94 26 04 	call	0x84c	; 0x84c <WalkerTraffic_RespondWalkRequest>
	WalkerTraffic_RespondUpdateRequest();
 872:	0e 94 09 04 	call	0x812	; 0x812 <WalkerTraffic_RespondUpdateRequest>
 876:	08 95       	ret

00000878 <__umulhisi3>:
 878:	a2 9f       	mul	r26, r18
 87a:	b0 01       	movw	r22, r0
 87c:	b3 9f       	mul	r27, r19
 87e:	c0 01       	movw	r24, r0
 880:	a3 9f       	mul	r26, r19
 882:	70 0d       	add	r23, r0
 884:	81 1d       	adc	r24, r1
 886:	11 24       	eor	r1, r1
 888:	91 1d       	adc	r25, r1
 88a:	b2 9f       	mul	r27, r18
 88c:	70 0d       	add	r23, r0
 88e:	81 1d       	adc	r24, r1
 890:	11 24       	eor	r1, r1
 892:	91 1d       	adc	r25, r1
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
